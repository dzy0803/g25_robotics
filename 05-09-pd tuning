import os 
import numpy as np
from numpy.fft import fft, fftfreq
import time
from matplotlib import pyplot as plt
from simulation_and_control import pb, MotorCommands, PinWrapper, feedback_lin_ctrl, SinusoidalReference, CartesianDiffKin


# Configuration for the simulation
conf_file_name = "pandaconfig.json"  # Configuration file for the robot
cur_dir = os.path.dirname(os.path.abspath(__file__))
sim = pb.SimInterface(conf_file_name, conf_file_path_ext = cur_dir)  # Initialize simulation interface

# Get active joint names from the simulation
ext_names = sim.getNameActiveJoints()
ext_names = np.expand_dims(np.array(ext_names), axis=0)  # Adjust the shape for compatibility

source_names = ["pybullet"]  # Define the source for dynamic modeling

# Create a dynamic model of the robot
dyn_model = PinWrapper(conf_file_name, "pybullet", ext_names, source_names, False, 0, cur_dir)
num_joints = dyn_model.getNumberofActuatedJoints()

init_joint_angles = sim.GetInitMotorAngles()

print(f"Initial joint angles: {init_joint_angles}")

# single joint tuning
#episode_duration is specified in seconds
def simulate_with_given_pid_values(sim_, kp, joints_id, regulation_displacement=0.1, episode_duration=10, plot=False):
    
    # here we reset the simulator each time we start a new test
    # Reset simulator for new test
    sim_.ResetPose()
    
    # Initialize PID gain vectors
    kp_vec = np.array([1000]*dyn_model.getNumberofActuatedJoints())
    kp_vec[joints_id] = kp # Use scalar kp value for the specific joint

    kd = np.array([0]*dyn_model.getNumberofActuatedJoints())

    # Copy initial joint angles
    q_des = init_joint_angles.copy()
    qd_des = np.array([0]*dyn_model.getNumberofActuatedJoints())

    q_des[joints_id] = q_des[joints_id] + regulation_displacement  # Ensure this is scalar addition

   
    time_step = sim_.GetTimeStep()
    current_time = 0
    # Command and control loop
    cmd = MotorCommands()  # Initialize command structure for motors


    # Initialize data storage
    q_mes_all, qd_mes_all, q_d_all, qd_d_all,  = [], [], [], []
    

    steps = int(episode_duration/time_step)
    # testing loop
    for i in range(steps):
        # measure current state
        q_mes = sim_.GetMotorAngles(0)
        qd_mes = sim_.GetMotorVelocities(0)
        qdd_est = sim_.ComputeMotorAccelerationTMinusOne(0)
        # Compute sinusoidal reference trajectory
        # Ensure q_init is within the range of the amplitude
        
        # Control command
        cmd.tau_cmd = feedback_lin_ctrl(dyn_model, q_mes, qd_mes, q_des, qd_des, kp, kd)  # Zero torque command
        sim_.Step(cmd, "torque")  # Simulation step with torque command

        # Exit logic with 'q' key
        keys = sim_.GetPyBulletClient().getKeyboardEvents()
        qKey = ord('q')
        if qKey in keys and keys[qKey] and sim_.GetPyBulletClient().KEY_WAS_TRIGGERED:
            break
        
        #simulation_time = sim.GetTimeSinceReset()

        # Store data for plotting
        q_mes_all.append(q_mes)
        qd_mes_all.append(qd_mes)
        q_d_all.append(q_des)
        qd_d_all.append(qd_des)
        #cur_regressor = dyn_model.ComputeDyanmicRegressor(q_mes,qd_mes, qdd_est)
        #regressor_all = np.vstack((regressor_all, cur_regressor))

        #time.sleep(0.01)  # Slow down the loop for better visualization
        # get real time
        current_time += time_step
        #print("current time in seconds",current_time)
    
    # TODO make the plot for the current joint
    if plot:
        q_mes_all = np.array(q_mes_all)
        print(q_mes_all)
        qd_mes_all = np.array(qd_mes_all)
        print(qd_mes_all)
        q_d_all = np.array(q_d_all)
        print(q_d_all)
        qd_d_all = np.array(qd_d_all)
        print(qd_d_all)

        # Extract data for the specific joint being tuned (joints_id)
        joint_measured_angles = q_mes_all[:, joints_id]
        joint_measured_velocities = qd_mes_all[:, joints_id]
        joint_desired_angles = q_d_all[:, joints_id]
        joint_desired_velocities = qd_d_all[:, joints_id]

        # Create time vector
        time_vector = np.linspace(0, episode_duration, steps)

        # Plot the joint angles and velocities over time
        plt.figure()

        # Subplot 1: Joint Angles
        plt.subplot(2, 1, 1)
        plt.plot(time_vector, joint_measured_angles, label="Measured Angle", color='blue')
        plt.plot(time_vector, joint_desired_angles, label="Desired Angle", linestyle='--', color='green')
        plt.title(f"Joint {joints_id} Angle vs Time")
        plt.xlabel("Time (s)")
        plt.ylabel("Joint Angle (rad)")
        plt.legend()
        plt.grid(True)

        # Subplot 2: Joint Velocities
        plt.subplot(2, 1, 2)
        plt.plot(time_vector, joint_measured_velocities, label="Measured Velocity", color='orange')
        plt.plot(time_vector, joint_desired_velocities, label="Desired Velocity", linestyle='--', color='red')
        plt.title(f"Joint {joints_id} Velocity vs Time")
        plt.xlabel("Time (s)")
        plt.ylabel("Joint Velocity (rad/s)")
        plt.legend()
        plt.grid(True)
        plt.figure()

        # Adjust layout for better viewing
        plt.tight_layout()

        # Show the plot
        plt.show()

    return q_mes_all
    
     
def perform_frequency_analysis(data, dt):
    n = len(data)
    yf = fft(data)
    xf = fftfreq(n, dt)[:n//2]
    power = 2.0/n * np.abs(yf[:n//2])

    # Optional: Plot the spectrum
    plt.figure()
    plt.plot(xf, power)
    plt.title("FFT of the signal")
    plt.xlabel("Frequency in Hz")
    plt.ylabel("Amplitude")
    plt.grid(True)
    plt.show()

    return xf, power

# TODO Implement the table in thi function

if __name__ == '__main__':
    joint_id = 0  # Joint ID to tune
    regulation_displacement = 1.0  # Displacement from the initial joint position
    init_gain= 1000 
    gain_step= 1.5 
    max_gain= 10000 
    episode_duration= 10
    time_step = 0.01

    joints_id = 0
    # kp = np.array([1000, 1000, 1000, 1000, 1000, 1000, 1000])
    kp = 16.7

    data = simulate_with_given_pid_values(sim, kp, joints_id, regulation_displacement, episode_duration, plot=True)
    data_converted = np.array(data)
    xf, power = perform_frequency_analysis(data_converted[:,0],sim.GetTimeStep())
    
    # TODO using simulate_with_given_pid_values() and perform_frequency_analysis() write you code to test different Kp values 
    # for each joint, bring the system to oscillation and compute the the PD parameters using the Ziegler-Nichols method
    
    #def simulate_with_given_pid_values(sim_, kp, joints_id, regulation_displacement=0.1, episode_duration=10, plot=False):


   
