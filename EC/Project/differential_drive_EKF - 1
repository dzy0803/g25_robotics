#!/usr/bin/env python3

import numpy as np
import time
import os
import matplotlib.pyplot as plt
from simulation_and_control import pb, MotorCommands, PinWrapper, feedback_lin_ctrl, SinusoidalReference, CartesianDiffKin, differential_drive_controller_adjusting_bearing
from simulation_and_control import differential_drive_regulation_controller, regulation_polar_coordinates, regulation_polar_coordinate_quat, wrap_angle, velocity_to_wheel_angular_velocity
import pinocchio as pin
from scipy.linalg import solve_discrete_are

# Import classes from modularized files
from robot_localization_system import FilterConfiguration, Map, RobotEstimator
from regulator_model import RegulatorModel

# Global variables
W_range = 0.5 ** 2  # Measurement noise variance (range measurements)

grid_spacing = 5
grid_x = np.arange(-20, 21, grid_spacing) + 2 # from -20 to 20 inclusive
grid_y = np.arange(-20, 21, grid_spacing) + 3 # from -20 to 20 inclusive
landmarks = np.array([(x, y) for x in grid_x for y in grid_y])
landmarks = np.array([
            [5, 10],
            [15, 5],
            [10, 15]
        ])
def landmark_range_observations(base_position, landmarks, W_range):
    """
    Simulate range observations to landmarks with noise.

    Parameters:
    - base_position: np.array([x, y, theta])
    - landmarks: np.array([[x1, y1], [x2, y2], ...])
    - W_range: Measurement noise variance

    Returns:
    - y: np.array of range measurements
    """
    y = []
    W = W_range
    for lm in landmarks:
        # True range measurement (with noise)
        dx = lm[0] - base_position[0]
        dy = lm[1] - base_position[1]
        range_pred = np.sqrt(dx**2 + dy**2)
        # Avoid division by zero
        if range_pred == 0:
            continue  # Skip this landmark
        range_meas = range_pred + np.random.normal(0, np.sqrt(W))
        y.append(range_meas)
    y = np.array(y)
    return y


def quaternion2bearing(q_w, q_x, q_y, q_z):
    """
    Convert quaternion to yaw angle (bearing).

    Parameters:
    - q_w, q_x, q_y, q_z: Quaternion components

    Returns:
    - bearing_: Yaw angle in radians
    """
    quat = pin.Quaternion(q_w, q_x, q_y, q_z)
    quat.normalize()  # Ensure the quaternion is normalized

    # Convert quaternion to rotation matrix
    rot_quat = quat.toRotationMatrix()

    # Convert rotation matrix to Euler angles (roll, pitch, yaw)
    base_euler = pin.rpy.matrixToRpy(rot_quat)  # Returns [roll, pitch, yaw]

    # Extract the yaw angle
    bearing_ = base_euler[2]

    return bearing_


def wrap_angle(angle):
    """
    Normalize angle to be within [-pi, pi].

    Parameters:
    - angle: Angle in radians

    Returns:
    - Wrapped angle in radians
    """
    return np.arctan2(np.sin(angle), np.cos(angle))


def init_simulator(conf_file_name):
    """
    Initialize simulation and dynamic model.

    Parameters:
    - conf_file_name: Configuration file name

    Returns:
    - sim: Simulation interface
    - dyn_model: Dynamic model wrapper
    - num_joints: Number of actuated joints
    """
    cur_dir = os.path.dirname(os.path.abspath(__file__))
    sim = pb.SimInterface(conf_file_name, conf_file_path_ext=cur_dir)

    ext_names = np.expand_dims(np.array(sim.getNameActiveJoints()), axis=0)
    source_names = ["pybullet"]

    dyn_model = PinWrapper(conf_file_name, "pybullet", ext_names, source_names, False, 0, cur_dir)
    num_joints = dyn_model.getNumberofActuatedJoints()

    return sim, dyn_model, num_joints


def main():
    # Configuration for the simulation
    conf_file_name = "robotnik.json"  # Configuration file for the robot
    sim, dyn_model, num_joints = init_simulator(conf_file_name)

    # Adjusting floor friction
    floor_friction = 100
    sim.SetFloorFriction(floor_friction)
    # Getting time step
    time_step = sim.GetTimeStep()
    current_time = 0

    # Initialize data storage
    base_pos_all, base_bearing_all = [], []
    x_est_all = []  # Store estimated states
    Sigma_est_all = []  # Store estimated covariances

    # Initializing MPC
    # Define the matrices
    num_states = 3
    num_controls = 2

    # Horizon length
    N_mpc = 15

    # Initialize the regulator model
    regulator = RegulatorModel(N_mpc, num_states, num_controls, num_states)

    # Define the cost matrices
    Qcoeff = np.array([400, 501, 599])
    # Qcoeff = np.array([310, 310, 80])

    # Rcoeff = 1
    Rcoeff = np.array([1.45,0.2])
    regulator.setCostMatrices(Qcoeff, Rcoeff)

    # Initialize control input to small non-zero values to avoid singular matrices
    u_mpc = [1e-5, 1e-5]

    # Robot parameters
    wheel_radius = 0.11
    wheel_base_width = 0.46

    # Initialize MotorCommands
    cmd = MotorCommands()  # Initialize command structure for motors
    init_angular_wheels_velocity_cmd = np.array([0.0, 0.0, 0.0, 0.0])
    init_interface_all_wheels = ["velocity", "velocity", "velocity", "velocity"]
    cmd.SetControlCmd(init_angular_wheels_velocity_cmd, init_interface_all_wheels)

    # Initialize EKF components
    filter_config = FilterConfiguration()
    map_ = Map()
    estimator = RobotEstimator(filter_config, map_)
    estimator.start()

    while current_time < 4:
        # Advance simulation
        sim.Step(cmd, "torque")
        time_step = sim.GetTimeStep()
        current_time += time_step

        # Kalman filter prediction
        estimator.set_control_input(u_mpc)
        estimator.predict_to(current_time)

        # Get the measurements from the simulator
        # Measurements of the robot without noise (just for comparison purpose)
        base_pos_no_noise = sim.bot[0].base_position
        base_ori_no_noise = sim.bot[0].base_orientation
        base_bearing_no_noise_ = quaternion2bearing(
            base_ori_no_noise[3], base_ori_no_noise[0], base_ori_no_noise[1], base_ori_no_noise[2]
        )
        base_lin_vel_no_noise = sim.bot[0].base_lin_vel
        base_ang_vel_no_noise = sim.bot[0].base_ang_vel

        # Measurements of the current state (real measurements with noise)
        base_pos = sim.GetBasePosition()
        base_ori = sim.GetBaseOrientation()
        base_bearing_ = quaternion2bearing(base_ori[3], base_ori[0], base_ori[1], base_ori[2])

        # Get landmark range measurements
        y_range = landmark_range_observations(base_pos, map_.landmarks, W_range)

        # Update the filter with the latest observations
        if len(y_range) > 0:
            estimator.update_from_landmark_range_observations(y_range)
        else:
            estimator.copy_prediction_to_estimate()

        # Get the current state estimate
        x_est, Sigma_est = estimator.estimate()

        # Figure out what the controller should do next
        # Compute the matrices needed for MPC optimization
        # Update the matrices A and B at each time step using the estimated state
        cur_state_x_for_linearization = x_est  # Use the estimated state
        cur_u_for_linearization = u_mpc
        regulator.updateSystemMatrices(sim, cur_state_x_for_linearization, cur_u_for_linearization)

        # Generate the propagation matrices
        S_bar, T_bar, Q_bar, R_bar = regulator.propagation_model_regulator_fixed_std()
        H, F = regulator.compute_H_and_F(S_bar, T_bar, Q_bar, R_bar)
        x0_mpc = x_est.flatten()

        # Compute the optimal control sequence
        try:
            H_inv = np.linalg.inv(H)
            u_mpc = -H_inv @ F @ x0_mpc
        except np.linalg.LinAlgError:
            print("Warning: H matrix is singular. Skipping control update.")
            u_mpc = u_mpc  # Keep previous control input

        # Return the optimal control sequence
        u_mpc = u_mpc[0:num_controls]

        # Prepare control command to send to the low level controller
        left_wheel_velocity, right_wheel_velocity = velocity_to_wheel_angular_velocity(
            u_mpc[0], u_mpc[1], wheel_base_width, wheel_radius
        )
        angular_wheels_velocity_cmd = np.array([right_wheel_velocity, left_wheel_velocity, left_wheel_velocity, right_wheel_velocity])
        interface_all_wheels = ["velocity", "velocity", "velocity", "velocity"]
        cmd.SetControlCmd(angular_wheels_velocity_cmd, interface_all_wheels)

        # Exit logic with 'q' key (unchanged)
        keys = sim.GetPyBulletClient().getKeyboardEvents()
        qKey = ord('q')
        if qKey in keys and keys[qKey] and sim.GetPyBulletClient().KEY_WAS_TRIGGERED:
            break

        # Store data for plotting if necessary
        base_pos_all.append(base_pos_no_noise)
        base_bearing_all.append(base_bearing_no_noise_)
        x_est_all.append(x_est)
        Sigma_est_all.append(Sigma_est)

    # Convert lists to arrays
    base_pos_all = np.array(base_pos_all)
    base_bearing_all = np.array(base_bearing_all)
    x_est_all = np.array(x_est_all)
    Sigma_est_all = np.array(Sigma_est_all)

    # Plotting
    # Plot true trajectory and estimated trajectory
    plt.figure(figsize=(12, 6))
    plt.plot(base_pos_all[:, 0], base_pos_all[:, 1], label='True Trajectory')
    plt.plot(x_est_all[:, 0], x_est_all[:, 1], label='Estimated Trajectory')
    plt.scatter(base_pos_all[0, 0], base_pos_all[0, 1], c='r', label='Start')
    plt.scatter(base_pos_all[-1, 0], base_pos_all[-1, 1], c='g', label='End')
    plt.scatter(0, 0, c='b', label='Goal')
    plt.legend(fontsize=16)
    plt.xlabel('x', fontsize=18)
    plt.ylabel('y', fontsize=18)
    plt.title('Robot Trajectory', fontsize=22)
    plt.grid()
    plt.show()

    # Plot state estimates vs true states over time
    plt.figure(figsize=(12, 6))
    plt.plot(base_pos_all[:, 0], label='True x')
    plt.plot(x_est_all[:, 0], label='Estimated x')
    plt.plot(base_pos_all[:, 1], label='True y')
    plt.plot(x_est_all[:, 1], label='Estimated y')
    plt.plot(base_bearing_all, label='True theta')
    plt.plot(x_est_all[:, 2], label='Estimated theta')
    plt.axhline(0, color='red', linestyle='--', label='Goal State')
    plt.xlabel('Time Step', fontsize=18)
    plt.ylabel('State', fontsize=18)
    plt.title('State Estimates vs True States', fontsize=22)
    plt.grid()
    plt.legend(fontsize=16)
    plt.show()

    # Plot estimation errors
    plt.figure(figsize=(12, 6))
    error_x = base_pos_all[:, 0] - x_est_all[:, 0]
    error_y = base_pos_all[:, 1] - x_est_all[:, 1]
    error_theta = base_bearing_all - x_est_all[:, 2]
    error_theta = np.arctan2(np.sin(error_theta), np.cos(error_theta))  # Normalize angle error
    plt.plot(error_x, label='Error in x')
    plt.plot(error_y, label='Error in y')
    plt.plot(error_theta, label='Error in theta')
    plt.xlabel('Time Step', fontsize=18)
    plt.ylabel('Estimation Error', fontsize=18)
    plt.title('Estimation Errors over Time', fontsize=22)
    plt.grid()
    plt.legend(fontsize=16)
    plt.show()


if __name__ == '__main__':
    main()
